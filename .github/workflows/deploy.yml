name: Deploy to Cloud Run

on:
  push:
    branches: [ Frist_Brench ]
  workflow_dispatch:

env:
  PROJECT_ID: bamboo-strata-274419
  SERVICE: testflaskserver2
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Verify Authentication
      run: |
        echo "üîê Authenticating with Google Cloud..."
        gcloud auth list
        gcloud config list
        echo "üìã Configuration:"
        echo "  Project: ${{ env.PROJECT_ID }}"
        echo "  Service: ${{ env.SERVICE }}"
        echo "  Region: ${{ env.REGION }}"

    - name: Deploy to Cloud Run
      run: |
        echo "üöÄ Deploying to Cloud Run..."
        
        # Deploy directly with Dockerfile (avoid Cloud Build issues)
        gcloud run deploy ${{ env.SERVICE }} \
          --source . \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --timeout 300s \
          --project ${{ env.PROJECT_ID }} \
          --execution-environment gen2 \
          --quiet

    - name: Get Service URL and Test
      run: |
        echo "üåê Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format='value(status.url)')
        
        if [ -z "$SERVICE_URL" ]; then
          echo "‚ùå Failed to get service URL"
          exit 1
        fi
        
        echo "‚úÖ Service deployed successfully!"
        echo "üåê Main URL: $SERVICE_URL"
        echo "‚ôüÔ∏è  Chess Game: $SERVICE_URL/chess"
        echo "üîç Health Check: $SERVICE_URL/api/health"
        
        # Test the deployment
        echo "üß™ Testing deployment..."
        if curl -f -s "$SERVICE_URL/api/health" > /dev/null; then
          echo "‚úÖ Health check passed!"
          echo "::notice title=Deployment Success::Chess game deployed successfully to $SERVICE_URL/chess"
        else
          echo "‚ö†Ô∏è  Health check failed, but service is deployed"
          echo "::warning title=Health Check::Service deployed but health check failed"
        fi